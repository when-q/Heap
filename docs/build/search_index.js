var documenterSearchIndex = {"docs":
[{"location":"#Heap","page":"Index","title":"Heap","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"","category":"page"},{"location":"#Functions","page":"Index","title":"Functions","text":"","category":"section"},{"location":"#Heap.jl","page":"Index","title":"Heap.jl","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"CurrentModule = Heap","category":"page"},{"location":"","page":"Index","title":"Index","text":"indexing(i::Int64, j::Int64)\nheight(i::Int64)\nswap(arr::Vector{Int64}, i::Int64, j::Int64)\nconvert_index(i::Int64)\nparent(i::Int64, h::Int64)\ninput(io::IO)\nmax_heapify(arr::Vector{Int64}, index::Int64, depth::Int64)\nmax_heap_insert(arr::Vector{Int64},k::Int64)\nheap_extract_max(arr::Vector{Int64})\nheap_max(arr::Int64)\nbuild_max_heap(arr::Vector{Int64})","category":"page"},{"location":"#Heap.indexing-Tuple{Int64, Int64}","page":"Index","title":"Heap.indexing","text":"indexing(i, j)::Int64\n\nGiving the depth and the position of the element on that level,  returning the index of it in the array\n\nHeap: \n\n0     a\n1   b   c\n2  d f g h \n\nArray: [a,b,c,d,e,f,g,h]\n\nTo find the position of f: index(i=2, j=2)  ightarrow  6\n\n\n\n\n\n","category":"method"},{"location":"#Heap.height-Tuple{Int64}","page":"Index","title":"Heap.height","text":"height(i::Int64)::Int64\n\n\n\nget the height of current obj on the heap\n\n\n\n\n\n","category":"method"},{"location":"#Heap.swap-Tuple{Vector{Int64}, Int64, Int64}","page":"Index","title":"Heap.swap","text":"swap(arr::Vector{Int64}, i::Int64, j::Int64)\n\nswap values of two elements in an array\n\n\n\n\n\n","category":"method"},{"location":"#Heap.convert_index-Tuple{Int64}","page":"Index","title":"Heap.convert_index","text":"convert_index(i::Int64)\n\n\n\nconvert python index to julia index\n\n\n\n\n\n","category":"method"},{"location":"#Heap.parent-Tuple{Int64, Int64}","page":"Index","title":"Heap.parent","text":"parent(i::Int64, h::Int64)\n\n\n\nreturn the parent of current obj on the heap\n\n\n\n\n\n","category":"method"},{"location":"#Heap.input-Tuple{IO}","page":"Index","title":"Heap.input","text":"input(io::IO)::Vector{Int64}\n\n\n\nconvert an io input into a vector\n\n\n\n\n\n","category":"method"},{"location":"#Heap.max_heapify-Tuple{Vector{Int64}, Int64, Int64}","page":"Index","title":"Heap.max_heapify","text":"max_heapify(arr::Vector{Int64}, index::Int64, depth::Int64)\n\n\n\nRuns in O(lg(n)) time and is used to maintain the (max) Heap property whenever some node/index i has violated the heap rule (but left subtree, right subtree are each Max Heaps)\n\n\n\n\n\n","category":"method"},{"location":"#Heap.max_heap_insert-Tuple{Vector{Int64}, Int64}","page":"Index","title":"Heap.max_heap_insert","text":"max_heap_insert(arr::Vector{Int64},k::Int64)\n\n\n\nan insert a new item (and maintain the heap property)  in O(lg(n)) time. \n\nSame for Heap-Increase-Key\n\n\n\n\n\n","category":"method"},{"location":"#Heap.heap_extract_max-Tuple{Vector{Int64}}","page":"Index","title":"Heap.heap_extract_max","text":"heap_extract_max(arr::Vector{Int64})\n\n\n\nReturn (and delete) the maximum item of a Heap in O(lg(n)) time\n\n\n\n\n\n","category":"method"},{"location":"#Heap.heap_max-Tuple{Int64}","page":"Index","title":"Heap.heap_max","text":"heap_max(arr::Int64)\n\n\n\nReturns the max element of a Heap - Î˜(1) time.\n\n\n\n\n\n","category":"method"},{"location":"#Heap.build_max_heap-Tuple{Vector{Int64}}","page":"Index","title":"Heap.build_max_heap","text":"build_max_heap(arr::Vector{Int64})\n\n\n\nSpecial one called Build-Max-Heap will run in O(n) time to build a Heap from scratch from an unordered input array.\n\n\n\n\n\n","category":"method"}]
}
